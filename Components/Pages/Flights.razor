@page "/flights"
@using TravelApp.Data

<!-- 
    Name: Roman Sorokin, Nasratullah Asadi, Mace Howald
    Date: July 2, 2024
    Program Description: This Razor page allows users to find and reserve flights. Users can select the origin, destination, and day of the flight, and the program will display matching flights. 
    Inputs: 
        - Origin (from): selected from a dropdown menu of airport codes and names.
        - Destination (to): selected from a dropdown menu of airport codes and names.
        - Day: selected from a dropdown menu of days of the week.
        - Traveler's name and citizenship for making a reservation.
    Processing: 
        - The program fetches flights matching the selected criteria from the flight manager.
        - It allows the user to select a flight and then enter traveler details to make a reservation.
    Outputs: 
        - A list of matching flights or a message indicating no flights found.
        - Confirmation messages for errors or successful reservation.
-->

<div class="container">
    <h3>Flight Finder</h3>
    <div class="search-section">
        <div class="input-group">
            <label for="from-input">From:</label>
            <select id="from-input" @bind="from">
                <option disabled selected value="">Select Origin</option>
                @foreach (var airport in airports)
                {
                    <option value="@airport.Key">@airport.Key - @airport.Value</option> // Dropdown menu of each airport dictionary item 
                }
            </select>
        </div>
        <div class="input-group">
            <label for="to-input">To:</label>
            <select id="to-input" @bind="to">
                <option disabled selected value="">Select Destination</option>
                @foreach (var airport in airports)
                {
                    <option value="@airport.Key">@airport.Key - @airport.Value</option> // Dropdown menu of each airport dictionary item
                }
            </select>
        </div>
        <div class="input-group">
            <label for="day-input">Day:</label>
            <select id="day-input" @bind="day">
                <option disabled selected value="">Select Day</option>
                <option value="Monday">Monday</option>
                <option value="Tuesday">Tuesday</option>
                <option value="Wednesday">Wednesday</option>
                <option value="Thursday">Thursday</option>
                <option value="Friday">Friday</option>
                <option value="Saturday">Saturday</option>
                <option value="Sunday">Sunday</option>
            </select>
        </div>
        <div class="input-group">
            <button type="button" class="btn btn-primary" @onclick="FindFlights">Find flights</button>
        </div>
    </div>

    <div class="flights-section">
        <h3>Flights</h3>
        <div id="flights">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="error-message">@errorMessage</p> // If the exception was found, display the appropriate error message
            }
            else if (flights == null)
            {
                <p>Loading...</p> // Default message
            }
            else if (!flights.Any())
            {
                <p>No flights found.</p> // Displays when no flights are found.
            }
            else
            {
                @foreach (var flight in flights)
                {
                    <li @onclick="() => SelectFlight(flight)" style="cursor: pointer;">@flight.ToString()</li> // Loads each found flight with all its attributes and displays them in the Flight class ToString() method.
                }
            }
        </div>
    </div>

    <div class="reserve-section">
        <h3>Reserve</h3>
        <form id="reserve-form">
            <div class="input-group">
                <label for="flight-code">Flight code:</label>
                <input type="text" id="flight-code" placeholder="Flight" @bind="selectedFlightCode" readonly>
            </div>
            <div class="input-group">
                <label for="airline">Airline:</label>
                <input type="text" id="airline" placeholder="Airline" @bind="selectedAirline" readonly>
            </div>
            <div class="input-group">
                <label for="day">Day:</label>
                <input type="text" id="day" placeholder="Day" @bind="selectedDay" readonly>
            </div>
            <div class="input-group">
                <label for="time">Time:</label>
                <input type="text" id="time" placeholder="Time" @bind="selectedTime" readonly>
            </div>
            <div class="input-group">
                <label for="cost">Cost:</label>
                <input type="text" id="cost" placeholder="0" @bind="selectedCost" readonly>
            </div>
            <div class="input-group">
                <label for="name">Name:</label>
                <input type="text" id="name" @bind="travelerName">
            </div>
            <div class="input-group">
                <label for="citizenship">Citizenship:</label>
                <input type="text" id="citizenship" @bind="citizenship">
            </div>
            <button class="btn btn-primary" type="button" @onclick="MakeReservation">Reserve</button>
        </form>
        <div class="reservation-code">
            <label for="reservation-code">Reservation Code:</label>
            <div id="reservation-code" class="code-display">@reservationCode</div>
        </div>
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">@successMessage</div> // Displays a green success message at the bottom of the page if a successMessage is not null or empty.
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
                <div class="alert alert-danger">@errorMessage</div> // Displays a red error message at the bottom of the page if a errorMessage is not null or empty.
        }
    </div>
</div>

@code {
    string from;
    string to;
    string day;
    List<Flight> flights = null;
    Flight selectedFlight;
    string selectedFlightCode;
    string selectedAirline;
    string selectedDay;
    string selectedTime;
    string selectedCost;
    string travelerName;
    string citizenship;
    string reservationCode;
    string successMessage;
    string errorMessage;


    Dictionary<string, string> airports;
    FlightsService flightsService;
    FlightManager flightManager;
    ReservationManager reservationManager;

    protected override void OnInitialized()
    {
        // Initalize FlightsService, FlightManager, and ReservationManager
        flightsService = new FlightsService();
        flightManager = new FlightManager();
        reservationManager = new ReservationManager();
        // Load airports in to the airports dictionary
        airports = flightsService.GetAllAirports();
    }

    public void FindFlights()
    {
        try
        {
            flights = flightManager.FindFlights(from, to, day);
            if (flights == null || flights.Count == 0)
            {
                flights = new List<Flight>(); // Initalizes flights as an empty list if no matches are found.
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error finding flights: {ex.Message}"; // Displays an appropriate error message if there are any issues in finding flights.
            successMessage = string.Empty;
        }
    }

    public void SelectFlight(Flight flight)
    {
        selectedFlight = flight;
        selectedFlightCode = flight.FlightCode;
        selectedAirline = flight.Airline;
        selectedDay = flight.DayOfWeek;
        selectedTime = flight.Time;
        selectedCost = flight.Cost.ToString();
        successMessage = string.Empty;
        errorMessage = string.Empty;
    }

    public void MakeReservation()
    {
        try
        {
            if (selectedFlight == null)
            {
                throw new Exception("No flight selected");
            }
            if (string.IsNullOrEmpty(travelerName))
            {
                throw new InvalidNameException("Name is required");
            }
            if (string.IsNullOrEmpty(citizenship))
            {
                throw new InvalidCitizenshipException("Citizenship is required");
            }

            var reservation = reservationManager.MakeReservation(selectedFlight, travelerName, citizenship);
            reservationCode = reservation.ReservationCode;
            reservationManager.Persist();  // Save reservations into a csv file.
            successMessage = "Reservation successfully made!"; // Prints an appropriate success message if the user saves a reservation successfully.
            errorMessage = string.Empty;  // Clears any previous error message to ensure the error message is not displayed as well.
        }
        catch (InvalidNameException e)
        {
            errorMessage = e.Message;
            successMessage = string.Empty;
        }
        catch (InvalidCitizenshipException e)
        {
            errorMessage = e.Message;
            successMessage = string.Empty;
        }
        catch (NoMoreSeatsException e)
        {
            errorMessage = e.Message;
            successMessage = string.Empty;
        }
        catch (Exception e)
        {
            errorMessage = $"Error making reservation: {e.Message}";
            successMessage = string.Empty;
        }
    }
}
