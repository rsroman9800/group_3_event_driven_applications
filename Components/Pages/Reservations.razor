@page "/reservations"
@using TravelApp.Data

<div class="container">
    <h3>Reservation Finder</h3>
    <div class="search-section">
        <div class="input-group">
            <label for="code-input">Code:</label>
            <input type="text" id="code-input" @bind="searchCode" placeholder="Any">
        </div>
        <div class="input-group">
            <label for="airline-input">Airline:</label>
            <input type="text" id="airline-input" @bind="searchAirline" placeholder="Any">
        </div>
        <div class="input-group">
            <label for="name-input">Name:</label>
            <input type="text" id="name-input" @bind="searchName" placeholder="Any">
        </div>
        <div class="input-group">
            <button type="submit" class="btn btn-primary" @onclick="FindReservations">Find reservations</button>
        </div>
    </div>

    <div class="reservations-section">
        <h3>Reservations</h3>
        <div id="reservations">
            @if (reservations == null)
            {
                <p>Loading...</p> // Default message
            }
            else if (!reservations.Any())
            {
                <p>No reservations found.</p> // Displayed if no reservations are found
            }
            else
            {
                @foreach (var reservation in reservations)
                {
                    <li @onclick="() => SelectReservation(reservation)" style="cursor: pointer;">@reservation.ToString()</li> // Loads each found reservation with all its attributes and displays them in the reservation class ToString() method.
                }
            }
        </div>
    </div>

    <div class="reserve-section">
        <h3>Reserve</h3>
        <form id="reserve-form">
            <div class="input-group">
                <label for="reservation-code">Reservation code:</label>
                <input type="text" id="reservation-code" readonly @bind="selectedReservationCode">
            </div>
            <div class="input-group">
                <label for="flight-code">Flight code:</label>
                <input type="text" id="flight-code" readonly @bind="selectedFlightCode">
            </div>
            <div class="input-group">
                <label for="airline">Airline:</label>
                <input type="text" id="airline" readonly @bind="selectedAirline">
            </div>
            <div class="input-group">
                <label for="cost">Cost:</label>
                <input type="text" id="cost" readonly @bind="selectedCost">
            </div>
            <div class="input-group">
                <label for="name">Name:</label>
                <input type="text" id="name" @bind="selectedTravelerName">
            </div>
            <div class="input-group">
                <label for="citizenship">Citizenship:</label>
                <input type="text" id="citizenship" @bind="selectedCitizenship">
            </div>
            <div class="input-group">
                <label for="status">Status:</label>
                <select id="status" @bind="selectedStatus">
                    <option value="Active">Active</option>
                    <option value="Inactive">Inactive</option>
                </select>
            </div>
            <button class="btn btn-primary" type="button" @onclick="UpdateReservation">Save</button>
        </form>
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">@successMessage</div> // Displays a green success message at the bottom of the page if a successMessage is not null or empty.
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div> // Displays a red error message at the bottom of the page if a errorMessage is not null or empty.
        }
    </div>
</div>

@code {
    string searchCode;
    string searchAirline;
    string searchName;
    List<Reservation> reservations = new List<Reservation>();
    Reservation selectedReservation;
    string selectedReservationCode;
    string selectedFlightCode;
    string selectedAirline;
    string selectedCost;
    string selectedTravelerName;
    string selectedCitizenship;
    string selectedStatus;
    string successMessage;
    string errorMessage;

    ReservationManager reservationManager = new ReservationManager(); // Initalizes ReservationManager

    private void FindReservations()
    {
        try
        {
            if (string.IsNullOrEmpty(searchCode) && string.IsNullOrEmpty(searchAirline) && string.IsNullOrEmpty(searchName))
            {
                reservations = reservationManager.GetAllReservations(); // Displays all reservations if the user doesn't enter a search code, airline, or name.
            }
            else
            {
                reservations = reservationManager.FindReservations(searchCode, searchAirline, searchName); // Finds specific reservations using either the search code, airline, or name.
            }

            if (reservations == null || reservations.Count == 0)
            {
                reservations = new List<Reservation>(); // Creates an empty list item if reservations are at 0 or null.
            }
        }
        catch (Exception e)
        {
            errorMessage = $"Error finding reservations: {e.Message}"; // Displays an error message if the system catches any exception
            successMessage = string.Empty;
            // Show error message to user
        }
    }

    private void SelectReservation(Reservation reservation)
    {
        selectedReservation = reservation;
        selectedReservationCode = reservation.ReservationCode;
        selectedFlightCode = reservation.Flight.FlightCode;
        selectedAirline = reservation.Flight.Airline;
        selectedCost = reservation.Flight.Cost.ToString();
        selectedTravelerName = reservation.TravelerName;
        selectedCitizenship = reservation.Citizenship;
        selectedStatus = reservation.IsActive ? "Active" : "Inactive";
        successMessage = string.Empty;
        errorMessage = string.Empty;
    }

    private void UpdateReservation()
    {
        try
        {
            if (selectedReservation == null)
            {
                throw new InvalidOperationException("No reservation selected.");
            }
            if (string.IsNullOrEmpty(selectedTravelerName))
            {
                throw new InvalidNameException("Name is required.");
            }
            if (string.IsNullOrEmpty(selectedCitizenship))
            {
                throw new InvalidCitizenshipException("Citizenship is required.");
            }

            reservationManager.UpdateReservation(selectedReservationCode, selectedTravelerName, selectedCitizenship, selectedStatus == "Active"); // Updated the reservation with new values that were entered by the user and checks whether the status is active or not.
            reservationManager.Persist(); // Saves the updated reservation using the persist method.
            successMessage = "Reservation successfully updated!"; // Displays a successful message that the reservation was updated.
            errorMessage = string.Empty; // Clears the error message so it is not displayed.
        }
        catch (InvalidNameException e)
        {
            errorMessage = e.Message;
            successMessage = string.Empty;
        }
        catch (InvalidCitizenshipException e)
        {
            errorMessage = e.Message;
            successMessage = string.Empty;
        }
        catch (Exception e)
        {
            errorMessage = $"Error updating reservation: {e.Message}";
            successMessage = string.Empty;
        }
    }
}
